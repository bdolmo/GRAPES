#!/usr/bin/env perl

use strict;
use warnings;
use File::Basename;
use Cwd;
use Getopt::Long;
use Config;
use Sort::Key::Natural qw( natsort );
use List::MoreUtils qw{uniq};
our $dirname = dirname (__FILE__);
use lib (dirname (__FILE__));
use WES::Annotate;

our $cut  = `which cut`;
chomp $cut;
if (!$cut) {
	print "ERROR: cut command not found\n";
	exit;
}

our $cat  = `which cat`;
chomp $cat;
if (!$cat) {
	print "ERROR: cat command not found\n";
		exit;
}

our $head  = `which head`;
chomp $head;
if (!$head) {
	print "ERROR: head command not found\n";
	exit;
}

our $zcat  = `which zcat`;
chomp $zcat;
if (!$zcat) {
	print "ERROR: zcat command not found\n";
	exit;
}
our $grep;
our $sort;
if ($Config{osname} =~/darwin/) {
  $grep  = `which egrep`; chomp $grep;
  $sort = `which gsort`; chomp $sort;
}
else {
  $grep  = `which grep`; chomp $grep;
  $sort = `which sort`; chomp $sort;
}

our $awk  = `which awk`;
chomp $awk;
if (!$awk) {
	print "ERROR: awk command not found\n";
	exit;	
}

our $bedtools = `which bedtools`;
chomp $bedtools;

if (!$bedtools) {
    print " ERROR: BEDtools was not found on PATH\n";
	exit;
}
else {
    my $bedtools_version = `$bedtools --version | $cut -d \" \" -f 2 | $awk '{ split (\$0, a, \".\");  print a[2] }'`;
    chomp $bedtools_version;
	if ($bedtools_version < 19) { 
    	print " ERROR: BEDtools version $bedtools_version is too old. Please, consider installing the newest version\n"; exit;
    }
}

our $gnomADvcf	 = "$dirname/../db/gnomad/gnomad_v2.1_sv.sites.vcf.gz";

if (!-e $gnomADvcf) {
    print " ERROR: $gnomADvcf not found!\n";
    exit;
}

my $inputVCF;
my $minOlap;
my $outDir;

# Displaying usage panel
helpAnnot () if (@ARGV<3 or !GetOptions(
	'input_vcf=s' =>\$inputVCF,
    'l=f' =>\$minOlap,
	'o=s' =>\$outDir
    )
);

mkdir $outDir;

 if (!-e "$inputVCF") {
     print " ERROR: Input VCF $inputVCF does not exist!\n";
     exit;
 }

 if ($minOlap) {
     if ($minOlap > 1) {
         print " ERROR: minimum overlap (-m) param must be between 0 and 1\n";
         exit;
     }
 }
 else {
     $minOlap = 0.7;
 }

print " INFO: Annotating VCFs with gnomAD\n";
my $annotVCF = Annotate::doAnnotation($inputVCF, $outDir, $minOlap);

################
sub helpAnnot {

    print"
    Usage:  ./GRAPES annotate [OPTIONS] 
    Options:
    -i  STRING  Input VCF file
    -o  STRING  Output directory
    -l  FLOAT   Reciprocal overlap fraction\n\n";
    exit;

}